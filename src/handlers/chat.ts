import type { ChatMessage as ChatResponseV4 } from 'chatgpt';
import _ from 'lodash';
import type TelegramBot from 'node-telegram-bot-api';
import telegramifyMarkdown from 'telegramify-markdown';
import type { ChatGPT } from '../api.js';
import { BotOptions } from '../types.js';
import { logWithTime } from '../utils.js';
import Queue from 'promise-queue';
import { DB } from '../db.js';
import { randomEmoji } from '../lib/random.emoji.js';
import { aiModeration } from '../lib/openai.js';
import { downloadIfNeeded } from '../lib/file.download.js';
import { FileData } from '../lib/read.files.js';

enum actionEnum {
  COME_BACK_LATER = 'COME_BACK_LATER',
  START_LISTENING = 'START_LISTENING',
  FINISH_LISTENING = 'FINISH_LISTENING',
  SKIP_DISCUSSION = 'SKIP_DISCUSSION',
  START_DISCUSSION = 'START_DISCUSSION',
  FINISH_DISCUSSION = 'FINISH_DISCUSSION',
}

const days = new Map<number, number>();
const discussion = new Map<number, boolean>();
const listening = new Map<number, boolean>();

class ChatHandler {
  debug: number;
  protected _opts: BotOptions;
  protected _bot: TelegramBot;
  protected _api: ChatGPT;
  protected _n_queued = 0;
  protected _n_pending = 0;
  protected _apiRequestsQueue = new Queue(1, Infinity);
  protected _positionInQueue = new Map<string, number>();
  protected _updatePositionQueue = new Queue(20, Infinity);
  protected _db: DB;
  protected _prompts: FileData;

  constructor(
    bot: TelegramBot,
    api: ChatGPT,
    botOpts: BotOptions,
    db: DB,
    debug = 1,
    prompts: FileData,
  ) {
    this.debug = debug;
    this._bot = bot;
    this._api = api;
    this._opts = botOpts;
    this._db = db;
    this._prompts = prompts;
  }

  nextState(chatId: number, action: actionEnum) {
    let day = days.get(chatId);
    if (!day) {
      days.set(chatId, 0);
      day = 0;
    }
    if (action === actionEnum.COME_BACK_LATER) {
      return;
    }
    if (action === actionEnum.START_LISTENING) {
      days.set(chatId, day + 1);
      discussion.set(chatId, false);
      listening.set(chatId, true);
    }
    if (action === actionEnum.FINISH_LISTENING) {
      discussion.set(chatId, false);
      listening.set(chatId, false);
    }
    if (action === actionEnum.START_DISCUSSION) {
      discussion.set(chatId, true);
      listening.set(chatId, true);
    }
    if (action === actionEnum.SKIP_DISCUSSION) {
      discussion.set(chatId, false);
      listening.set(chatId, false);
    }
    if (action === actionEnum.FINISH_DISCUSSION) {
      discussion.set(chatId, false);
      listening.set(chatId, false);
    }
  }

  handle = async (
    msg: TelegramBot.Message,
    text: string,
    isMentioned: boolean,
  ): Promise<void> => {
    console.log(isMentioned);
    if (!text) return;

    if (msg.chat.type !== 'private' && isMentioned) {
      await this._bot.sendMessage(
        msg.chat.id,
        `–û–±—â–µ–Ω–∏–µ –≤–æ–∑–º–æ–∂–Ω–æ —Ç–æ–ª—å–∫–æ –≤ –ª–∏—á–Ω–æ–π –ø–µ—Ä–µ–ø–∏—Å–∫–µ`,
      );
      return;
    }
    if (msg.chat.type !== 'private' && !isMentioned) {
      return;
    }

    if (text === '–í–µ—Ä–Ω—É—Ç—å—Å—è –ø–æ–∑–∂–µ') {
      this.nextState(msg.chat.id, actionEnum.COME_BACK_LATER);
      await this._bot.sendChatAction(msg.chat.id, 'typing');
      await this._bot.sendMessage(
        msg.chat.id,
        `–í–æ–∑–≤—Ä–∞—â–∞–π—Ç–µ—Å—å, –∫–æ–≥–¥–∞ —É –≤–∞—Å –±—É–¥–µ—Ç –≤—Ä–µ–º—è. –î–æ –≤—Å—Ç—Ä–µ—á–∏!`,
        {
          reply_markup: {
            one_time_keyboard: true,
            keyboard: [[{ text: '–í–∫–ª—é—á–∏—Ç—å –ø–æ–¥–∫–∞—Å—Ç' }]],
          },
        },
      );
      return;
    }

    if (text === '–í–∫–ª—é—á–∏—Ç—å –ø–æ–¥–∫–∞—Å—Ç') {
      this.nextState(msg.chat.id, actionEnum.START_LISTENING);
      const day = days.get(msg.chat.id) ?? 1;

      if (day > 3) {
        await this._bot.sendMessage(
          msg.chat.id,
          `–í—ã –ø–æ—Å–ª—É—à–∞–ª–∏ –≤—Å–µ –ø–æ–¥–∫–∞—Å—Ç—ã. –°–ø–∞—Å–∏–±–æ –∑–∞ —É—á–∞—Å—Ç–∏–µ!`,
        );
        return;
      }

      await this._bot.sendChatAction(msg.chat.id, 'typing');
      const link = `https://storage.yandexcloud.net/photos.prostoapp.life/bot_podcast/podcast_day_${day}_compressed.mp3`;
      const filePath = await downloadIfNeeded(link);
      await this._bot.sendAudio(
        msg.chat.id,
        filePath,
        {
          // duration: 4076,
          protect_content: true,
          reply_markup: {
            keyboard: [[{ text: '–Ø –ø–æ—Å–ª—É—à–∞–ª(–∞) –ø–æ–¥–∫–∞—Å—Ç' }]],
          },
        },
        {
          filename: `–î–µ–Ω—å ${day}.mp3`,
          contentType: 'audio/mpeg',
        },
      );
      return;
    }

    if (text === '–Ø –ø–æ—Å–ª—É—à–∞–ª(–∞) –ø–æ–¥–∫–∞—Å—Ç') {
      this.nextState(msg.chat.id, actionEnum.FINISH_LISTENING);
      await this._bot.sendChatAction(msg.chat.id, 'typing');
      await this._bot.sendMessage(
        msg.chat.id,
        `–ö–∞–∫–∏–µ –≤–ø–µ—á–∞—Ç–ª–µ–Ω–∏—è –æ—Ç –ø–æ–¥–∫–∞—Å—Ç–∞? –î–∞–≤–∞–π—Ç–µ –æ–±—Å—É–¥–∏–º –≤ —á–∞—Ç–µ`,
        {
          reply_markup: {
            one_time_keyboard: true,
            keyboard: [
              [{ text: '–û–±—Å—É–¥–∏—Ç—å' }],
              [{ text: '–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å –æ–±—Å—É–∂–¥–µ–Ω–∏–µ' }],
            ],
          },
        },
      );
      return;
    }

    if (text === '–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å –æ–±—Å—É–∂–¥–µ–Ω–∏–µ') {
      const day = days.get(msg.chat.id) ?? 1;
      if (day >= 3) {
        await this._bot.sendMessage(
          msg.chat.id,
          `–í—ã –ø–æ—Å–ª—É—à–∞–ª–∏ –≤—Å–µ –ø–æ–¥–∫–∞—Å—Ç—ã. –°–ø–∞—Å–∏–±–æ –∑–∞ —É—á–∞—Å—Ç–∏–µ!`,
        );
        return;
      }

      this.nextState(msg.chat.id, actionEnum.SKIP_DISCUSSION);
      await this._bot.sendChatAction(msg.chat.id, 'typing');
      await this._bot.sendMessage(
        msg.chat.id,
        `–•–æ—Ä–æ—à–æ. –í—ã –≥–æ—Ç–æ–≤—ã –ø–æ—Å–ª—É—à–∞—Ç—å —Å–ª–µ–¥—É—é—â–∏–π —ç–ø–∏–∑–æ–¥?`,
        {
          reply_markup: {
            one_time_keyboard: true,
            keyboard: [
              [{ text: '–í–∫–ª—é—á–∏—Ç—å –ø–æ–¥–∫–∞—Å—Ç' }],
              [{ text: '–í–µ—Ä–Ω—É—Ç—å—Å—è –ø–æ–∑–∂–µ' }],
            ],
          },
        },
      );
      return;
    }

    if (text === '–ó–∞–≤–µ—Ä—à–∏—Ç—å –æ–±—Å—É–∂–¥–µ–Ω–∏–µ') {
      this.nextState(msg.chat.id, actionEnum.FINISH_DISCUSSION);
      const day = days.get(msg.chat.id) ?? 1;
      if (day >= 3) {
        await this._bot.sendMessage(
          msg.chat.id,
          `–í—ã –ø–æ—Å–ª—É—à–∞–ª–∏ –≤—Å–µ –ø–æ–¥–∫–∞—Å—Ç—ã. –°–ø–∞—Å–∏–±–æ –∑–∞ —É—á–∞—Å—Ç–∏–µ!`,
        );
        return;
      }
      await this._bot.sendChatAction(msg.chat.id, 'typing');
      await this._bot.sendMessage(
        msg.chat.id,
        `–°–ø–∞—Å–∏–±–æ –∑–∞ –æ–±—Å—É–∂–¥–µ–Ω–∏–µ! –ù–∞–¥–µ—é—Å—å, –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –∏–∑ –ø–æ–¥–∫–∞—Å—Ç–∞ –ø–æ–º–æ–∂–µ—Ç —É–ª—É—á—à–∏—Ç—å –≤–∞—à —Å–æ–Ω. –í—ã –≥–æ—Ç–æ–≤—ã –ø–æ—Å–ª—É—à–∞—Ç—å —Å–ª–µ–¥—É—é—â–∏–π —ç–ø–∏–∑–æ–¥?`,
        {
          reply_markup: {
            one_time_keyboard: true,
            keyboard: [
              [{ text: '–í–∫–ª—é—á–∏—Ç—å –ø–æ–¥–∫–∞—Å—Ç' }],
              [{ text: '–í–µ—Ä–Ω—É—Ç—å—Å—è –ø–æ–∑–∂–µ' }],
            ],
          },
        },
      );
      return;
    }

    if (text === '–û–±—Å—É–¥–∏—Ç—å') {
      this.nextState(msg.chat.id, actionEnum.START_DISCUSSION);
      await this._bot.sendMessage(msg.chat.id, '–û—Ç–ª–∏—á–Ω–æ!', {
        reply_markup: {
          one_time_keyboard: true,
          keyboard: [[{ text: '–ó–∞–≤–µ—Ä—à–∏—Ç—å –æ–±—Å—É–∂–¥–µ–Ω–∏–µ' }]],
        },
      });

      const day = days.get(msg.chat.id) ?? 1;
      if (day > 3) {
        await this._bot.sendMessage(
          msg.chat.id,
          `–í—ã –ø–æ—Å–ª—É—à–∞–ª–∏ –≤—Å–µ –ø–æ–¥–∫–∞—Å—Ç—ã. –°–ø–∞—Å–∏–±–æ –∑–∞ —É—á–∞—Å—Ç–∏–µ!`,
        );
        return;
      }

      const prompt = `audio${day}`;
      const instruction = this._prompts[prompt];
      if (instruction) {
        await this.handle(msg, instruction, isMentioned);
      }
      return;
    }

    if (discussion.get(msg.chat.id)) {
      const chatId = msg.chat.id;
      if (this.debug >= 1) {
        const userInfo = `@${msg.from?.username ?? ''} (${msg.from?.id})`;
        const chatInfo =
          msg.chat.type == 'private'
            ? 'private chat'
            : `group ${msg.chat.title} (${msg.chat.id})`;
        logWithTime(`üì© Message from ${userInfo} in ${chatInfo}:\n${text}`);
      }

      const flaggedCategories = await aiModeration(text);
      if (flaggedCategories.size > 0) {
        const message =
          '‚ö†Ô∏è –ò–∑–≤–∏–Ω–∏—Ç–µ, —è –Ω–µ –º–æ–≥—É –æ—Ç–≤–µ—Ç–∏—Ç—å –Ω–∞ –≤–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–∏ —Å –ø–æ–ª–∏—Ç–∏–∫–æ–π –º–æ–¥–µ—Ä–∞—Ü–∏–∏';
        // for (const [key, value] of flaggedCategories) {
        //   message += `\n\n[${key}: ${value}]`;
        // }
        await this._bot.sendMessage(chatId, message, {
          reply_markup: {
            keyboard: [[{ text: '–ó–∞–≤–µ—Ä—à–∏—Ç—å –æ–±—Å—É–∂–¥–µ–Ω–∏–µ' }]],
          },
        });
        return;
      }

      // Send a message to the chat acknowledging receipt of their message
      const reply = await this._bot.sendMessage(
        chatId,
        this._opts.queue ? '‚åõ' : randomEmoji(),
        {
          reply_to_message_id: msg.message_id,
        },
      );

      if (!this._opts.queue) {
        await this._sendToGpt(msg, text, chatId, reply);
      } else {
        // add to sequence queue due to chatGPT processes only one request at a time
        const requestPromise = this._apiRequestsQueue.add(() => {
          return this._sendToGpt(msg, text, chatId, reply);
        });
        if (this._n_pending == 0) {
          this._n_pending++;
        } else {
          this._n_queued++;
        }
        this._positionInQueue.set(
          this._getQueueKey(chatId, reply.message_id),
          this._n_queued,
        );

        await this._bot.editMessageText(
          this._n_queued > 0
            ? `‚åõ: –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ. –ü–µ—Ä–µ–¥ –í–∞–º–∏ –≤ –æ—á–µ—Ä–µ–¥–∏ –∑–∞–ø—Ä–æ—Å–æ–≤: #${this._n_queued}`
            : randomEmoji(),
          {
            chat_id: chatId,
            message_id: reply.message_id,
          },
        );
        await requestPromise;
      }
    }

    if (!days.get(msg.chat.id)) {
      await this._bot.sendChatAction(msg.chat.id, 'typing');
      await this._bot.sendMessage(
        msg.chat.id,
        `–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É—é! –Ø - –≤–∞—à –≥–∏–¥ –≤ –º–∏—Ä–µ —Å–Ω–∞. –í–º–µ—Å—Ç–µ —Å –∏–∑–≤–µ—Å—Ç–Ω—ã–º —Å–æ–º–Ω–æ–ª–æ–≥–æ–º –†–æ–º–∞–Ω–æ–º –ë—É–∑—É–Ω–æ–≤—ã–º –º—ã –ø–æ–¥–≥–æ—Ç–æ–≤–∏–ª–∏ –¥–ª—è –≤–∞—Å —Å–µ—Ä–∏—é —É–≤–ª–µ–∫–∞—Ç–µ–ª—å–Ω—ã—Ö –ø–æ–¥–∫–∞—Å—Ç–æ–≤ –æ —Ñ–∏–∑–∏–æ–ª–æ–≥–∏–∏ —Å–Ω–∞, —Ä–∞–∑—Ä—É—à–µ–Ω–∏–∏ –º–∏—Ñ–æ–≤ –∏ –ø–æ–ª–µ–∑–Ω—ã—Ö —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è—Ö. –í—Å–µ–≥–æ –¥–æ—Å—Ç—É–ø–Ω–æ —Ç—Ä–∏ –ø–æ–¥–∫–∞—Å—Ç–∞. –í—ã –≥–æ—Ç–æ–≤—ã –∏—Ö –ø–æ—Å–ª—É—à–∞—Ç—å?`,
        {
          reply_markup: {
            one_time_keyboard: true,
            keyboard: [
              [{ text: '–í–∫–ª—é—á–∏—Ç—å –ø–æ–¥–∫–∞—Å—Ç' }],
              [{ text: '–í–µ—Ä–Ω—É—Ç—å—Å—è –ø–æ–∑–∂–µ' }],
            ],
          },
        },
      );
    }
  };

  protected _sendToGpt = async (
    msg: TelegramBot.Message,
    text: string,
    chatId: number,
    originalReply: TelegramBot.Message,
  ) => {
    const userId = msg.from?.id ?? 0;
    let reply = originalReply;
    await this._bot.sendChatAction(chatId, 'typing');

    const ON_PROGRESS_WAIT_MS = 3000;

    const onProgress = _.throttle(
      async (partialResponse: ChatResponseV4) => {
        reply = await this._editMessage(reply, partialResponse.text);
        await this._bot.sendChatAction(chatId, 'typing');
      },
      ON_PROGRESS_WAIT_MS,
      { leading: true, trailing: false },
    );

    // Send a message to ChatGPT
    try {
      // eslint-disable-next-line @typescript-eslint/no-misused-promises
      const res = await this._api.sendMessage(msg, text, chatId, onProgress);
      await this._editMessage(reply, res.text);

      if (this.debug >= 1) logWithTime(`üì® Response:\n${res.text}`);
    } catch (err) {
      logWithTime('‚õîÔ∏è ChatGPT API error:', (err as Error).message);
      await this._db.clearContext(chatId, userId);
      await this._bot.sendMessage(
        chatId,
        // eslint-disable-next-line @typescript-eslint/no-unnecessary-condition
        (err as Error).message ??
          "‚ö†Ô∏è Sorry, I'm having trouble connecting to the server, please try again later.",
      );
    }

    // Update queue order after finishing current request
    await this._updateQueue(chatId, reply.message_id);
  };

  // Edit telegram message
  protected _editMessage = async (
    msg: TelegramBot.Message,
    text: string,
    needParse = true,
  ) => {
    if (!text || text.trim() == '' || msg.text == text) {
      return msg;
    }
    try {
      text = telegramifyMarkdown(text, 'escape');
      const res = await this._bot.editMessageText(text, {
        chat_id: msg.chat.id,
        message_id: msg.message_id,
        parse_mode: needParse ? 'MarkdownV2' : undefined,
      });
      // type of res is boolean | Message
      if (typeof res === 'object') {
        // return a Message type instance if res is a Message type
        return res;
      } else {
        // return the original message if res is a boolean type
        return msg;
      }
    } catch (err) {
      logWithTime('‚õîÔ∏è Edit message error:', (err as Error).message);
      if (this.debug >= 2) logWithTime('‚õîÔ∏è Message text:', text);
      return msg;
    }
  };

  protected _getQueueKey = (chatId: number, messageId: number) =>
    `${chatId}:${messageId}`;

  protected _parseQueueKey = (key: string) => {
    const [chat_id, message_id] = key.split(':');

    return { chat_id, message_id };
  };

  protected _updateQueue = async (chatId: number, messageId: number) => {
    // delete value for current request
    const queueKey = this._getQueueKey(chatId, messageId);
    this._positionInQueue.delete(queueKey);

    if (this._n_queued > 0) {
      this._n_queued--;
    } else {
      this._n_pending--;
    }

    for (const [key, value] of this._positionInQueue.entries()) {
      const { chat_id, message_id } = this._parseQueueKey(key);
      this._positionInQueue.set(key, value - 1);
      await this._updatePositionQueue.add(async () => {
        const position = this._positionInQueue.get(key) ?? 0;
        return this._bot.editMessageText(
          position > 0
            ? `‚åõ: –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ. –ü–µ—Ä–µ–¥ –í–∞–º–∏ –≤ –æ—á–µ—Ä–µ–¥–∏ –∑–∞–ø—Ä–æ—Å–æ–≤: #${this._positionInQueue.get(
                key,
              )}`
            : randomEmoji(),
          {
            chat_id,
            message_id: Number(message_id),
          },
        );
      });
    }
  };
}

export { ChatHandler };
