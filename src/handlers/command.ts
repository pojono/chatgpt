import type TelegramBot from 'node-telegram-bot-api';
import type { ChatGPT } from '../api.js';
import { BotOptions } from '../types.js';
import { logWithTime } from '../utils.js';
import { shutdown } from '../lib/shutdown.js';
import { FileData } from '../lib/read.files.js';
import { ChatHandler } from './chat.js';

class CommandHandler {
  debug: number;
  protected _opts: BotOptions;
  protected _bot: TelegramBot;
  protected _api: ChatGPT;
  protected _prompts: FileData;
  protected _chatHandler: ChatHandler;

  constructor(
    bot: TelegramBot,
    api: ChatGPT,
    botOpts: BotOptions,
    prompts: FileData,
    debug = 1,
    _chatHandler: ChatHandler,
  ) {
    this.debug = debug;
    this._bot = bot;
    this._api = api;
    this._opts = botOpts;
    this._prompts = prompts;
    this._chatHandler = _chatHandler;
  }

  handle = async (
    msg: TelegramBot.Message,
    command: string,
    isMentioned: boolean,
    botUsername: string,
  ) => {
    const userId = msg.from?.id ?? 0;
    const userInfo = `@${msg.from?.username ?? ''} (${msg.from?.id})`;
    const chatInfo =
      msg.chat.type == 'private'
        ? 'private chat'
        : `group ${msg.chat.title} (${msg.chat.id})`;
    if (this.debug >= 1) {
      logWithTime(
        `üë®‚ÄçüíªÔ∏è User ${userInfo} issued command "${command}" in ${chatInfo} (isMentioned=${isMentioned}).`,
      );
    }

    const commandArgs = msg.text?.split(' ');
    const firstArg = commandArgs?.[1];

    // Ignore commands without a mention in groups.
    if (msg.chat.type != 'private' && !isMentioned) return;

    switch (command) {
      case '/start':
        await this._bot.sendChatAction(msg.chat.id, 'typing');
        await this._api.resetThread(msg.chat.id, userId);
        await this._chatHandler.handle(
          msg,
          this._api._instruction,
          isMentioned,
        );
        break;

      case '/help':
        await this._bot.sendMessage(
          msg.chat.id,
          `
–û–±—â–µ–Ω–∏–µ —Å –±–æ—Ç–æ–º –∑–∞–≤–∏—Å–∏—Ç –æ—Ç —Ç–æ–≥–æ, –∫–∞–∫–∏–µ –¥–∞–Ω–Ω—ã–µ –≤–Ω–µ—Å–µ–Ω—ã –≤ Google Sheet.

–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –ø–æ –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—é —Ç–∞–±–ª–∏—Ü—ã:
1) –ù–µ–ª—å–∑—è –º–µ–Ω—è—Ç—å –ø–µ—Ä–≤—É—é —Å—Ç—Ä–æ–∫—É (–≤—ã–¥–µ–ª–µ–Ω–æ –∫—Ä–∞—Å–Ω—ã–º)
2) –í –ø–µ—Ä–≤–æ–º —Å—Ç–æ–ª–±—Ü–µ –Ω–∞—Ö–æ–¥—è—Ç—Å—è –Ω–∞–∑–≤–∞–Ω–∏—è –∏—Å–ø–æ–ª—å–∑—É–µ–º—ã—Ö –ø—Ä–æ–º–ø—Ç–æ–≤, –∞ –≤–æ –≤—Ç–æ—Ä–æ–º —Å—Ç–æ–ª–±—Ü–µ - —Å–∞–º–∏ –ø—Ä–æ–º–ø—Ç—ã
3) –ß—Ç–æ–±—ã –∑–∞–≥—Ä—É–∑–∏—Ç—å –≤ –±–æ—Ç –¥–∞–Ω–Ω—ã–µ –∏–∑ —ç—Ç–æ–π —Ç–∞–±–ª–∏—Ü—ã –Ω—É–∂–Ω–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∫–æ–º–∞–Ω–¥—É:
/reload @${botUsername} 
4) –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é –∑–∞–≥—Ä—É–∂–∞–µ—Ç—Å—è –ø—Ä–æ–º–ø—Ç default, —á—Ç–æ–±—ã –±–æ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–ª –¥—Ä—É–≥–æ–π –ø—Ä–æ–º–ø—Ç –∏–∑ —Ç–∞–±–ª–∏—Ü—ã —Å–ª–µ–¥—É–µ—Ç –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∫–æ–º–∞–Ω–¥—É:
/mode –ù–ê–ó–í–ê–ù–ò–ï–ü–†–û–ú–ü–¢–ê @${botUsername} 
5) –ï—Å–ª–∏ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∫–æ–º–∞–Ω–¥—É /start @${botUsername} - –±–æ—Ç –∏—Å–ø–æ–ª—å–∑—É–µ—Ç –≤—ã–±—Ä–∞–Ω–Ω—ã–π –ø—Ä–æ–º–ø—Ç –∏ –æ—Ç–ø—Ä–∞–≤–∏—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –ª–∏—Ü–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å –ø—Ä–æ–º–ø—Ç–æ–º –∏–∑ —Å—Ç—Ä–æ–∫–∏ start.
        `,
        );
        break;

      case '/reset':
        await this._bot.sendChatAction(msg.chat.id, 'typing');
        await this._api.resetThread(msg.chat.id, userId);
        await this._bot.sendMessage(
          msg.chat.id,
          'üîÑ –ö–æ–Ω—Ç–µ–∫—Å—Ç –í–∞—à–µ–≥–æ –¥–∏–∞–ª–æ–≥–∞ –≤ —ç—Ç–æ–º —á–∞—Ç–µ –±—ã–ª —Å–±—Ä–æ—à–µ–Ω.',
        );
        logWithTime(`üîÑ Chat thread reset by ${userInfo}.`);
        break;

      case '/mode':
        await this._bot.sendChatAction(msg.chat.id, 'typing');
        // eslint-disable-next-line no-case-declarations
        const text = Object.keys(this._prompts)
          .filter((key) => key !== 'start')
          .map((key) => `/set ${key} @${botUsername}`)
          .join('\n');
        await this._bot.sendMessage(
          msg.chat.id,
          text || 'No chat modes found.',
        );
        logWithTime(`üîÑ Chat modes were sent to ${userInfo}.`);
        break;

      case '/set':
        await this._bot.sendChatAction(msg.chat.id, 'typing');
        // eslint-disable-next-line no-case-declarations
        const mode = firstArg ?? '';
        // eslint-disable-next-line no-case-declarations
        const prompt = this._prompts[mode];
        if (prompt) {
          this._api.updateSystemMessage(prompt);
          await this._api.resetAllThreads();
          await this._bot.sendMessage(
            msg.chat.id,
            `üîÑ –û–±—â–µ–Ω–∏–µ –ø–µ—Ä–µ–≤–µ–¥–µ–Ω–æ –≤ —Ä–µ–∂–∏–º "${mode}" –¥–ª—è –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤–æ –≤—Å–µ—Ö —á–∞—Ç–∞—Ö. –ö–æ–Ω—Ç–µ–∫—Å—Ç –≤—Å–µ—Ö –¥–∏–∞–ª–æ–≥–æ–≤ —Å–±—Ä–æ—à–µ–Ω`,
          );
          logWithTime(`üîÑ Chat mode has been updated to "${mode}".`);
        } else {
          await this._bot.sendMessage(
            msg.chat.id,
            `üîÑ –†–µ–∂–∏–º "${mode}" –Ω–µ –Ω–∞–π–¥–µ–Ω.`,
          );
          logWithTime(`üîÑ Chat mode "${mode}" is not found.`);
        }
        break;

      case '/reload':
        await this._bot.sendChatAction(msg.chat.id, 'typing');
        await this._bot.sendMessage(msg.chat.id, 'üîÑ Restarting...');
        await shutdown();
        logWithTime(`üîÑ Session refreshed by ${userInfo}.`);
        break;

      default:
        await this._bot.sendMessage(
          msg.chat.id,
          '‚ö†Ô∏è Unsupported command. Run /help to see the usage.',
        );
        break;
    }
  };
}

export { CommandHandler };
