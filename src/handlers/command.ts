import type TelegramBot from 'node-telegram-bot-api';
import type { ChatGPT } from '../api.js';
import { BotOptions } from '../types.js';
import { logWithTime } from '../utils.js';
import { shutdown } from '../lib/shutdown.js';
import { FileData } from '../lib/read.files.js';
import { ChatHandler } from './chat.js';

class CommandHandler {
  debug: number;
  protected _opts: BotOptions;
  protected _bot: TelegramBot;
  protected _api: ChatGPT;
  protected _prompts: FileData;
  protected _chatHandler: ChatHandler;

  constructor(
    bot: TelegramBot,
    api: ChatGPT,
    botOpts: BotOptions,
    prompts: FileData,
    debug = 1,
    _chatHandler: ChatHandler,
  ) {
    this.debug = debug;
    this._bot = bot;
    this._api = api;
    this._opts = botOpts;
    this._prompts = prompts;
    this._chatHandler = _chatHandler;
  }

  handle = async (
    msg: TelegramBot.Message,
    command: string,
    isMentioned: boolean,
    // botUsername: string,
  ) => {
    const userId = msg.from?.id ?? 0;
    const userInfo = `@${msg.from?.username ?? ''} (${msg.from?.id})`;
    const chatInfo =
      msg.chat.type == 'private'
        ? 'private chat'
        : `group ${msg.chat.title} (${msg.chat.id})`;
    if (this.debug >= 1) {
      logWithTime(
        `üë®‚ÄçüíªÔ∏è User ${userInfo} issued command "${command}" in ${chatInfo} (isMentioned=${isMentioned}).`,
      );
    }

    // const commandArgs = msg.text?.split(' ');
    // const firstArg = commandArgs?.[1];

    // Ignore commands without a mention in groups.
    if (msg.chat.type != 'private' && !isMentioned) return;

    if (command.startsWith('/audio') && command.length === '/audio0'.length) {
      await this._bot.sendChatAction(msg.chat.id, 'typing');
      await this._api.resetThread(msg.chat.id, userId);

      const mode = command.slice(1);
      const instruction = this._prompts[mode];
      if (instruction) {
        await this._chatHandler.handle(msg, instruction, isMentioned);
      }
    }

    switch (command) {
      case '/start':
        await this._bot.sendMessage(
          msg.chat.id,
          `–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É—é! –Ø - –≤–∞—à –≥–∏–¥ –≤ –º–∏—Ä–µ —Å–Ω–∞. –í–º–µ—Å—Ç–µ —Å –∏–∑–≤–µ—Å—Ç–Ω—ã–º —Å–æ–º–Ω–æ–ª–æ–≥–æ–º –†–æ–º–∞–Ω–æ–º –ë—É–∑—É–Ω–æ–≤—ã–º –º—ã –ø–æ–¥–≥–æ—Ç–æ–≤–∏–ª–∏ –¥–ª—è –≤–∞—Å —Å–µ—Ä–∏—é —É–≤–ª–µ–∫–∞—Ç–µ–ª—å–Ω—ã—Ö –ø–æ–¥–∫–∞—Å—Ç–æ–≤ –æ —Ñ–∏–∑–∏–æ–ª–æ–≥–∏–∏ —Å–Ω–∞, —Ä–∞–∑—Ä—É—à–µ–Ω–∏–∏ –º–∏—Ñ–æ–≤ –∏ –ø–æ–ª–µ–∑–Ω—ã—Ö —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è—Ö. –í—Å–µ–≥–æ –¥–æ—Å—Ç—É–ø–Ω–æ —Ç—Ä–∏ –ø–æ–¥–∫–∞—Å—Ç–∞. –í—ã –≥–æ—Ç–æ–≤—ã –∏—Ö –ø–æ—Å–ª—É—à–∞—Ç—å?`,
        );
        break;
      case '/help':
        await this._bot.sendMessage(
          msg.chat.id,
          `
–û–±—â–µ–Ω–∏–µ —Å –±–æ—Ç–æ–º –∑–∞–≤–∏—Å–∏—Ç –æ—Ç —Ç–æ–≥–æ, –∫–∞–∫–∏–µ –¥–∞–Ω–Ω—ã–µ –≤–Ω–µ—Å–µ–Ω—ã –≤ Google Sheet.
https://docs.google.com/spreadsheets/d/1eroM0RfTK0YMHG6hHRoB7ubkBt_5pG9GTHTrTY7sikM/edit#gid=376591405`,
        );
        break;

      case '/reset':
        await this._bot.sendChatAction(msg.chat.id, 'typing');
        await this._api.resetThread(msg.chat.id, userId);
        await this._bot.sendMessage(
          msg.chat.id,
          'üîÑ –ö–æ–Ω—Ç–µ–∫—Å—Ç –í–∞—à–µ–≥–æ –¥–∏–∞–ª–æ–≥–∞ –≤ —ç—Ç–æ–º —á–∞—Ç–µ –±—ã–ª —Å–±—Ä–æ—à–µ–Ω.',
        );
        logWithTime(`üîÑ Chat thread reset by ${userInfo}.`);
        break;

      case '/reload':
        await this._bot.sendChatAction(msg.chat.id, 'typing');
        await this._bot.sendMessage(msg.chat.id, 'üîÑ Restarting...');
        await shutdown();
        logWithTime(`üîÑ Session refreshed by ${userInfo}.`);
        break;

      /*
      default:
        await this._bot.sendMessage(
          msg.chat.id,
          '‚ö†Ô∏è Unsupported command. Run /help to see the usage.',
        );
        break;
      */
    }
  };
}

export { CommandHandler };
